"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google-pay";
exports.ids = ["vendor-chunks/@google-pay"];
exports.modules = {

/***/ "(ssr)/./node_modules/@google-pay/button-react/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@google-pay/button-react/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GooglePayButton)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Keeps track scripts that have been requested by loadScript.\r\n */\r\nlet cachedScripts = {};\r\n/**\r\n * Asynchronously loads a script keeping track of which scripts have already\r\n * requested and loaded.\r\n *\r\n * Multiple requests to the same resource will return the same promise.\r\n *\r\n * @param src Script URL to load\r\n */\r\nfunction loadScript(src) {\r\n    const existing = cachedScripts[src];\r\n    if (existing) {\r\n        return existing;\r\n    }\r\n    const promise = new Promise((resolve, reject) => {\r\n        // Create script\r\n        const script = document.createElement('script');\r\n        script.src = src;\r\n        script.async = true;\r\n        // Script event listener callbacks for load and error\r\n        const onScriptLoad = () => {\r\n            resolve();\r\n        };\r\n        const onScriptError = () => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            cleanup();\r\n            // Remove from cachedScripts so that we can try loading again\r\n            delete cachedScripts[src];\r\n            script.remove();\r\n            reject(new Error(`Unable to load script ${src}`));\r\n        };\r\n        script.addEventListener('load', onScriptLoad);\r\n        script.addEventListener('error', onScriptError);\r\n        // Add script to document body\r\n        document.body.appendChild(script);\r\n        // Remove event listeners on cleanup\r\n        function cleanup() {\r\n            script.removeEventListener('load', onScriptLoad);\r\n            script.removeEventListener('error', onScriptError);\r\n        }\r\n    });\r\n    cachedScripts[src] = promise;\r\n    return promise;\r\n}\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Manages the lifecycle of the Google Pay button.\r\n *\r\n * Includes lifecycle management of the `PaymentsClient` instance,\r\n * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.\r\n */\r\nclass ButtonManager {\r\n    constructor(options) {\r\n        /**\r\n         * Handles the click event of the Google Pay button.\r\n         *\r\n         * This method would normally be private but has been made public for\r\n         * testing purposes.\r\n         *\r\n         * @private\r\n         */\r\n        this.handleClick = (event) => __awaiter(this, void 0, void 0, function* () {\r\n            const config = this.config;\r\n            if (!config) {\r\n                throw new Error('google-pay-button: Missing configuration');\r\n            }\r\n            const request = this.createLoadPaymentDataRequest(config);\r\n            try {\r\n                if (config.onClick) {\r\n                    config.onClick(event);\r\n                }\r\n                if (event.defaultPrevented) {\r\n                    return;\r\n                }\r\n                const result = yield this.client.loadPaymentData(request);\r\n                if (config.onLoadPaymentData) {\r\n                    config.onLoadPaymentData(result);\r\n                }\r\n            }\r\n            catch (err) {\r\n                if (err.statusCode === 'CANCELED') {\r\n                    if (config.onCancel) {\r\n                        config.onCancel(err);\r\n                    }\r\n                }\r\n                else if (config.onError) {\r\n                    config.onError(err);\r\n                }\r\n                else {\r\n                    console.error(err);\r\n                }\r\n            }\r\n        });\r\n        this.options = options;\r\n    }\r\n    getElement() {\r\n        return this.element;\r\n    }\r\n    isGooglePayLoaded() {\r\n        var _a, _b;\r\n        return 'google' in (window || global) && !!((_b = (_a = google === null || google === void 0 ? void 0 : google.payments) === null || _a === void 0 ? void 0 : _a.api) === null || _b === void 0 ? void 0 : _b.PaymentsClient);\r\n    }\r\n    mount(element) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.isGooglePayLoaded()) {\r\n                try {\r\n                    yield loadScript('https://pay.google.com/gp/p/js/pay.js');\r\n                }\r\n                catch (err) {\r\n                    if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.onError) {\r\n                        this.config.onError(err);\r\n                    }\r\n                    else {\r\n                        console.error(err);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            this.element = element;\r\n            if (element) {\r\n                this.appendStyles();\r\n                if (this.config) {\r\n                    this.updateElement();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    unmount() {\r\n        this.element = undefined;\r\n    }\r\n    configure(newConfig) {\r\n        let promise = undefined;\r\n        this.config = newConfig;\r\n        if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {\r\n            promise = this.updateElement();\r\n        }\r\n        this.oldInvalidationValues = this.getInvalidationValues(newConfig);\r\n        return promise !== null && promise !== void 0 ? promise : Promise.resolve();\r\n    }\r\n    /**\r\n     * Creates client configuration options based on button configuration\r\n     * options.\r\n     *\r\n     * This method would normally be private but has been made public for\r\n     * testing purposes.\r\n     *\r\n     * @private\r\n     */\r\n    createClientOptions(config) {\r\n        const clientConfig = {\r\n            environment: config.environment,\r\n            merchantInfo: this.createMerchantInfo(config),\r\n        };\r\n        if (config.onPaymentDataChanged || config.onPaymentAuthorized) {\r\n            clientConfig.paymentDataCallbacks = {};\r\n            if (config.onPaymentDataChanged) {\r\n                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n                clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {\r\n                    const result = config.onPaymentDataChanged(paymentData);\r\n                    return result || {};\r\n                };\r\n            }\r\n            if (config.onPaymentAuthorized) {\r\n                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n                clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {\r\n                    const result = config.onPaymentAuthorized(paymentData);\r\n                    return result || {};\r\n                };\r\n            }\r\n        }\r\n        return clientConfig;\r\n    }\r\n    createIsReadyToPayRequest(config) {\r\n        const paymentRequest = config.paymentRequest;\r\n        const request = {\r\n            apiVersion: paymentRequest.apiVersion,\r\n            apiVersionMinor: paymentRequest.apiVersionMinor,\r\n            allowedPaymentMethods: paymentRequest.allowedPaymentMethods,\r\n            existingPaymentMethodRequired: config.existingPaymentMethodRequired,\r\n        };\r\n        return request;\r\n    }\r\n    /**\r\n     * Constructs `loadPaymentData` request object based on button configuration.\r\n     *\r\n     * It infers request properties like `shippingAddressRequired`,\r\n     * `shippingOptionRequired`, and `billingAddressRequired` if not already set\r\n     * based on the presence of their associated options and parameters. It also\r\n     * infers `callbackIntents` based on the callback methods defined in button\r\n     * configuration.\r\n     *\r\n     * This method would normally be private but has been made public for\r\n     * testing purposes.\r\n     *\r\n     * @private\r\n     */\r\n    createLoadPaymentDataRequest(config) {\r\n        const request = Object.assign(Object.assign({}, config.paymentRequest), { merchantInfo: this.createMerchantInfo(config) });\r\n        // TODO: #13 re-enable inferrence if/when we agree as a team\r\n        return request;\r\n    }\r\n    createMerchantInfo(config) {\r\n        const merchantInfo = Object.assign({}, config.paymentRequest.merchantInfo);\r\n        // apply softwareInfo if not set\r\n        if (!merchantInfo.softwareInfo) {\r\n            merchantInfo.softwareInfo = {\r\n                id: this.options.softwareInfoId,\r\n                version: this.options.softwareInfoVersion,\r\n            };\r\n        }\r\n        return merchantInfo;\r\n    }\r\n    isMounted() {\r\n        return this.element != null && this.element.isConnected !== false;\r\n    }\r\n    removeButton() {\r\n        if (this.element instanceof ShadowRoot || this.element instanceof Element) {\r\n            for (const child of Array.from(this.element.children)) {\r\n                if (child.tagName !== 'STYLE') {\r\n                    child.remove();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateElement() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this.isMounted())\r\n                return;\r\n            const element = this.getElement();\r\n            if (!this.config) {\r\n                throw new Error('google-pay-button: Missing configuration');\r\n            }\r\n            // remove existing button\r\n            this.removeButton();\r\n            try {\r\n                this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));\r\n            }\r\n            catch (err) {\r\n                if (this.config.onError) {\r\n                    this.config.onError(err);\r\n                }\r\n                else {\r\n                    console.error(err);\r\n                }\r\n                return;\r\n            }\r\n            const buttonOptions = {\r\n                buttonType: this.config.buttonType,\r\n                buttonColor: this.config.buttonColor,\r\n                buttonRadius: this.config.buttonRadius,\r\n                buttonSizeMode: this.config.buttonSizeMode,\r\n                buttonLocale: this.config.buttonLocale,\r\n                onClick: this.handleClick,\r\n                allowedPaymentMethods: this.config.paymentRequest.allowedPaymentMethods,\r\n            };\r\n            const rootNode = element.getRootNode();\r\n            if (rootNode instanceof ShadowRoot) {\r\n                buttonOptions.buttonRootNode = rootNode;\r\n            }\r\n            // pre-create button\r\n            const button = this.client.createButton(buttonOptions);\r\n            this.setClassName(element, [element.className, 'not-ready']);\r\n            element.appendChild(button);\r\n            let showButton = false;\r\n            let readyToPay;\r\n            try {\r\n                readyToPay = yield this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config));\r\n                showButton =\r\n                    (readyToPay.result && !this.config.existingPaymentMethodRequired)\r\n                        || (readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired)\r\n                        || false;\r\n            }\r\n            catch (err) {\r\n                if (this.config.onError) {\r\n                    this.config.onError(err);\r\n                }\r\n                else {\r\n                    console.error(err);\r\n                }\r\n            }\r\n            if (!this.isMounted())\r\n                return;\r\n            if (showButton) {\r\n                try {\r\n                    this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));\r\n                }\r\n                catch (err) {\r\n                    console.log('Error with prefetch', err);\r\n                }\r\n                // remove hidden className\r\n                this.setClassName(element, (element.className || '').split(' ').filter(className => className && className !== 'not-ready'));\r\n            }\r\n            if (this.isReadyToPay !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result) || this.paymentMethodPresent !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent)) {\r\n                this.isReadyToPay = !!(readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result);\r\n                this.paymentMethodPresent = readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent;\r\n                if (this.config.onReadyToPayChange) {\r\n                    const readyToPayResponse = {\r\n                        isButtonVisible: showButton,\r\n                        isReadyToPay: this.isReadyToPay,\r\n                    };\r\n                    if (this.paymentMethodPresent) {\r\n                        readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;\r\n                    }\r\n                    this.config.onReadyToPayChange(readyToPayResponse);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    setClassName(element, classNames) {\r\n        const className = classNames.filter(name => name).join(' ');\r\n        if (className) {\r\n            element.className = className;\r\n        }\r\n        else {\r\n            element.removeAttribute('class');\r\n        }\r\n    }\r\n    appendStyles() {\r\n        var _a, _b, _c;\r\n        if (typeof document === 'undefined')\r\n            return;\r\n        const rootNode = (_a = this.element) === null || _a === void 0 ? void 0 : _a.getRootNode();\r\n        const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\\w-]+/g, '')}-${(_b = this.config) === null || _b === void 0 ? void 0 : _b.buttonLocale}`;\r\n        // initialize styles if rendering on the client:\r\n        if (rootNode) {\r\n            if (!((_c = rootNode.getElementById) === null || _c === void 0 ? void 0 : _c.call(rootNode, styleId))) {\r\n                const style = document.createElement('style');\r\n                style.id = styleId;\r\n                style.type = 'text/css';\r\n                style.innerHTML = `\n          ${this.options.cssSelector} {\n            display: inline-block;\n          }\n          ${this.options.cssSelector}.not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        `;\r\n                if (rootNode instanceof Document && rootNode.head) {\r\n                    rootNode.head.appendChild(style);\r\n                }\r\n                else {\r\n                    rootNode.appendChild(style);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isClientInvalidated(newConfig) {\r\n        if (!this.oldInvalidationValues)\r\n            return true;\r\n        const newValues = this.getInvalidationValues(newConfig);\r\n        return newValues.some((value, index) => JSON.stringify(value) !== JSON.stringify(this.oldInvalidationValues[index]));\r\n    }\r\n    getInvalidationValues(config) {\r\n        var _a, _b;\r\n        return [\r\n            config.environment,\r\n            config.existingPaymentMethodRequired,\r\n            !!config.onPaymentDataChanged,\r\n            !!config.onPaymentAuthorized,\r\n            config.buttonType,\r\n            config.buttonColor,\r\n            config.buttonRadius,\r\n            config.buttonLocale,\r\n            config.buttonSizeMode,\r\n            config.paymentRequest.merchantInfo.merchantId,\r\n            config.paymentRequest.merchantInfo.merchantName,\r\n            (_a = config.paymentRequest.merchantInfo.softwareInfo) === null || _a === void 0 ? void 0 : _a.id,\r\n            (_b = config.paymentRequest.merchantInfo.softwareInfo) === null || _b === void 0 ? void 0 : _b.version,\r\n            config.paymentRequest.allowedPaymentMethods,\r\n        ];\r\n    }\r\n}\n\nvar name = \"@google-pay/button-react\";\nvar version = \"3.1.0\";\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst CLASS = 'google-pay-button-container';\r\n/**\r\n * React component for the Google Pay button\r\n */\r\nclass GooglePayButton extends (react__WEBPACK_IMPORTED_MODULE_0___default().Component) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.manager = new ButtonManager({\r\n            cssSelector: `.${CLASS}`,\r\n            softwareInfoId: name,\r\n            softwareInfoVersion: version,\r\n        });\r\n        this.elementRef = react__WEBPACK_IMPORTED_MODULE_0___default().createRef();\r\n    }\r\n    componentDidMount() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const element = this.elementRef.current;\r\n            if (element) {\r\n                yield this.manager.configure(this.props);\r\n                yield this.manager.mount(element);\r\n            }\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        this.manager.unmount();\r\n    }\r\n    componentDidUpdate() {\r\n        this.manager.configure(this.props);\r\n    }\r\n    render() {\r\n        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", { ref: this.elementRef, className: [CLASS, this.props.className].filter(c => c).join(' '), style: this.props.style }));\r\n    }\r\n}\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@google-pay/button-react/dist/index.js\n");

/***/ })

};
;